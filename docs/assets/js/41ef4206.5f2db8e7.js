"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[5988],{3636:(e,t,a)=>{a.d(t,{Iu:()=>p,yg:()=>h});var n=a(5668);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(a),g=r,h=d["".concat(s,".").concat(g)]||d[g]||u[g]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},1556:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=a(5307),r=(a(5668),a(3636));const o={title:"<Form /> Props"},i="&lt;Form /> props",l={unversionedId:"api-reference/form-props",id:"api-reference/form-props",title:"<Form /> Props",description:"acceptcharset",source:"@site/docs/api-reference/form-props.md",sourceDirName:"api-reference",slug:"/api-reference/form-props",permalink:"/react-jsonschema-form/docs/api-reference/form-props",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/api-reference/form-props.md",tags:[],version:"current",frontMatter:{title:"<Form /> Props"},sidebar:"docs",previous:{title:"API Reference",permalink:"/react-jsonschema-form/docs/api-reference/"},next:{title:"AntD Customization",permalink:"/react-jsonschema-form/docs/api-reference/themes/antd/uiSchema"}},s={},m=[{value:"acceptcharset",id:"acceptcharset",level:2},{value:"action",id:"action",level:2},{value:"autoComplete",id:"autocomplete",level:2},{value:"autocomplete",id:"autocomplete-1",level:2},{value:"className",id:"classname",level:2},{value:"children",id:"children",level:2},{value:"customValidate",id:"customvalidate",level:2},{value:"experimental_defaultFormStateBehavior",id:"experimental_defaultformstatebehavior",level:2},{value:"<code>arrayMinItems</code>",id:"arrayminitems",level:3},{value:"<code>arrayMinItems.populate</code>",id:"arrayminitemspopulate",level:4},{value:"<code>arrayMinItems.computeSkipPopulate</code>",id:"arrayminitemscomputeskippopulate",level:4},{value:"computeSkipPopulate &lt;T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any&gt;()",id:"computeskippopulate-t--any-s-extends-strictrjsfschema--rjsfschema-f-extends-formcontexttype--any",level:5},{value:"Parameters",id:"parameters",level:6},{value:"Returns",id:"returns",level:6},{value:"Example",id:"example",level:5},{value:"<code>arrayMinItems.mergeExtraDefaults</code>",id:"arrayminitemsmergeextradefaults",level:4},{value:"<code>emptyObjectFields</code>",id:"emptyobjectfields",level:3},{value:"<code>allOf</code>",id:"allof",level:3},{value:"constAsDefaults",id:"constasdefaults",level:3},{value:"mergeDefaultsIntoFormData",id:"mergedefaultsintoformdata",level:3},{value:"experimental_customMergeAllOf",id:"experimental_custommergeallof",level:2},{value:"disabled",id:"disabled",level:2},{value:"readonly",id:"readonly",level:2},{value:"enctype",id:"enctype",level:2},{value:"extraErrors",id:"extraerrors",level:2},{value:"extraErrorsBlockSubmit",id:"extraerrorsblocksubmit",level:2},{value:"fields",id:"fields",level:2},{value:"focusOnFirstError",id:"focusonfirsterror",level:2},{value:"formContext",id:"formcontext",level:2},{value:"formData",id:"formdata",level:2},{value:"id",id:"id",level:2},{value:"idPrefix",id:"idprefix",level:2},{value:"idSeparator",id:"idseparator",level:2},{value:"liveOmit",id:"liveomit",level:2},{value:"liveValidate",id:"livevalidate",level:2},{value:"method",id:"method",level:2},{value:"name",id:"name",level:2},{value:"noHtml5Validate",id:"nohtml5validate",level:2},{value:"noValidate",id:"novalidate",level:2},{value:"omitExtraData",id:"omitextradata",level:2},{value:"onBlur",id:"onblur",level:2},{value:"onChange",id:"onchange",level:2},{value:"onError",id:"onerror",level:2},{value:"onFocus",id:"onfocus",level:2},{value:"onSubmit",id:"onsubmit",level:2},{value:"schema",id:"schema",level:2},{value:"showErrorList",id:"showerrorlist",level:2},{value:"tagName",id:"tagname",level:2},{value:"target",id:"target",level:2},{value:"templates",id:"templates",level:2},{value:"transformErrors",id:"transformerrors",level:2},{value:"translateString",id:"translatestring",level:2},{value:"uiSchema",id:"uischema",level:2},{value:"validator",id:"validator",level:2},{value:"widgets",id:"widgets",level:2}],p={toc:m},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.yg)(d,(0,n.c)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"form--props"},"<","Form /> props"),(0,r.yg)("h2",{id:"acceptcharset"},"acceptcharset"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"accept-charset")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-accept-charset"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"action"},"action"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action"},"HTML attribute on the form"),"."),(0,r.yg)("p",null,"Note that this just renders the ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," attribute in the HTML markup. There is no real network request being sent to this ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," on submit. Instead, react-jsonschema-form catches the submit event with ",(0,r.yg)("inlineCode",{parentName:"p"},"event.preventDefault()")," and then calls the ",(0,r.yg)("a",{parentName:"p",href:"#onSubmit"},(0,r.yg)("inlineCode",{parentName:"a"},"onSubmit"))," function, where you could send a request programmatically with ",(0,r.yg)("inlineCode",{parentName:"p"},"fetch")," or similar."),(0,r.yg)("h2",{id:"autocomplete"},"autoComplete"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"autocomplete")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"autocomplete-1"},"autocomplete"),(0,r.yg)("p",null,"Deprecated, same functionality as ",(0,r.yg)("inlineCode",{parentName:"p"},"autoComplete")),(0,r.yg)("h2",{id:"classname"},"className"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"class")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"children"},"children"),(0,r.yg)("p",null,"You can provide custom buttons to your form via the ",(0,r.yg)("inlineCode",{parentName:"p"},"Form")," component's ",(0,r.yg)("inlineCode",{parentName:"p"},"children"),". If no children are provided, by default a ",(0,r.yg)("inlineCode",{parentName:"p"},"Submit")," button will be rendered."),(0,r.yg)("p",null,"For other ways to modify the default ",(0,r.yg)("inlineCode",{parentName:"p"},"Submit")," button, see both the ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/api-reference/uiSchema#submitbuttonoptions"},"Submit Button Options")," and the ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/advanced-customization/custom-templates#submitbutton"},"SubmitButton Template")," documentation."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(\n  <Form schema={schema} validator={validator}>\n    <div>\n      <button type='submit'>Submit</button>\n      <button type='button'>Cancel</button>\n    </div>\n  </Form>,\n  document.getElementById('app')\n);\n")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Warning:")," There needs to be a button or an input with ",(0,r.yg)("inlineCode",{parentName:"p"},'type="submit"')," to trigger the form submission (and then the form validation).")),(0,r.yg)("h2",{id:"customvalidate"},"customValidate"),(0,r.yg)("p",null,"Formerly the ",(0,r.yg)("inlineCode",{parentName:"p"},"validate")," prop.\nThe ",(0,r.yg)("inlineCode",{parentName:"p"},"customValidate")," prop requires a function that specifies custom validation rules for the form.\nSee ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/usage/validation"},"Validation")," for more information."),(0,r.yg)("h2",{id:"experimental_defaultformstatebehavior"},"experimental_defaultFormStateBehavior"),(0,r.yg)("p",null,"Experimental features to specify different form state behavior.\nCurrently, this only affects the handling of optional array fields where ",(0,r.yg)("inlineCode",{parentName:"p"},"minItems")," is set and handling of setting defaults based on the value of ",(0,r.yg)("inlineCode",{parentName:"p"},"emptyObjectFields"),"."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Warning:")," This API is experimental and unstable, therefore breaking changes may be shipped in minor or patch releases. If you want to use this feature, we recommend pinning exact versions of ",(0,r.yg)("inlineCode",{parentName:"p"},"@rjsf/\\*")," packages in your package.json file or be ready to update your use of it when necessary.")),(0,r.yg)("p",null,"The following subsections represent the different keys in this object, with the tables explaining the values and their meanings."),(0,r.yg)("h3",{id:"arrayminitems"},(0,r.yg)("inlineCode",{parentName:"h3"},"arrayMinItems")),(0,r.yg)("p",null,"This optional subsection is an object with two optional fields, ",(0,r.yg)("inlineCode",{parentName:"p"},"populate")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"mergeExtraDefaults"),".\nWhen not specified, it defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"{ populate: 'all', mergeExtraDefaults: false }"),"."),(0,r.yg)("h4",{id:"arrayminitemspopulate"},(0,r.yg)("inlineCode",{parentName:"h4"},"arrayMinItems.populate")),(0,r.yg)("p",null,"Optional enumerated flag controlling how array minItems are populated, defaulting to ",(0,r.yg)("inlineCode",{parentName:"p"},"all"),":"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Flag Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"all")),(0,r.yg)("td",{parentName:"tr",align:null},"Legacy behavior - populate minItems entries with default values initially and include empty array when no values have been defined.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"requiredOnly")),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore ",(0,r.yg)("inlineCode",{parentName:"td"},"minItems")," on a field when calculating defaults unless the field is required.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"never")),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore ",(0,r.yg)("inlineCode",{parentName:"td"},"minItems")," on a field when calculating defaults for required and non-required. Value will set only if defined ",(0,r.yg)("inlineCode",{parentName:"td"},"default")," and from ",(0,r.yg)("inlineCode",{parentName:"td"},"formData"))))),(0,r.yg)("h4",{id:"arrayminitemscomputeskippopulate"},(0,r.yg)("inlineCode",{parentName:"h4"},"arrayMinItems.computeSkipPopulate")),(0,r.yg)("p",null,"The signature and documentation for this property is as follow:"),(0,r.yg)("h5",{id:"computeskippopulate-t--any-s-extends-strictrjsfschema--rjsfschema-f-extends-formcontexttype--any"},"computeSkipPopulate <T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>()"),(0,r.yg)("p",null,"A function that determines whether to skip populating the array with default values based on the provided validator, schema, and root schema.\nIf the function returns ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", the array will not be populated with default values.\nIf the function returns ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),", the array will be populated with default values according to the ",(0,r.yg)("inlineCode",{parentName:"p"},"populate")," option."),(0,r.yg)("h6",{id:"parameters"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"validator: ValidatorType<T, S, F> - An implementation of the ",(0,r.yg)("inlineCode",{parentName:"li"},"ValidatorType")," interface that is used to detect valid schema conditions"),(0,r.yg)("li",{parentName:"ul"},"schema: S - The schema for which resolving a condition is desired"),(0,r.yg)("li",{parentName:"ul"},"[rootSchema]",": S - The root schema that will be forwarded to all the APIs")),(0,r.yg)("h6",{id:"returns"},"Returns"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"boolean: A boolean indicating whether to skip populating the array with default values.")),(0,r.yg)("h5",{id:"example"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    stringArray: {\n      type: 'array',\n      items: { type: 'string' },\n      minItems: 1,\n    },\n    numberArray: {\n      type: 'array',\n      items: { type: 'number' },\n      minItems: 1,\n    },\n  },\n  required: ['stringArray', 'numberArray'],\n};\n\nconst computeSkipPopulateNumberArrays = (validator, schema, rootSchema) =>\n  // These conditions are needed to narrow down the type of the schema.items\n  !Array.isArray(schema?.items) &&\n  typeof schema?.items !== 'boolean' &&\n  schema?.items?.type === 'number',\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    experimental_defaultFormStateBehavior={{\n      arrayMinItems: {\n        computeSkipPopulate: computeSkipPopulateNumberArrays,\n      },\n    }}\n  />,\n  document.getElementById('app')\n);\n")),(0,r.yg)("h4",{id:"arrayminitemsmergeextradefaults"},(0,r.yg)("inlineCode",{parentName:"h4"},"arrayMinItems.mergeExtraDefaults")),(0,r.yg)("p",null,"Optional boolean flag, defaulting to ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," when not specified.\nWhen ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," is provided and does not contain ",(0,r.yg)("inlineCode",{parentName:"p"},"minItems")," worth of data, this flag controls whether the extra data provided by the defaults is appended onto the existing ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," items to ensure the ",(0,r.yg)("inlineCode",{parentName:"p"},"minItems")," condition is met.\nWhen ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," (legacy behavior), only the ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," provided is merged into the default form state, even if there are fewer than the ",(0,r.yg)("inlineCode",{parentName:"p"},"minItems"),".\nWhen ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", the defaults are appended onto the end of the ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," until the ",(0,r.yg)("inlineCode",{parentName:"p"},"minItems")," condition is met."),(0,r.yg)("h3",{id:"emptyobjectfields"},(0,r.yg)("inlineCode",{parentName:"h3"},"emptyObjectFields")),(0,r.yg)("p",null,"Optional enumerated flag controlling how empty object fields are populated, defaulting to ",(0,r.yg)("inlineCode",{parentName:"p"},"populateAllDefaults"),":"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Flag Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"populateAllDefaults")),(0,r.yg)("td",{parentName:"tr",align:null},"Legacy behavior - set default when there is a primitive value, an non-empty object field, or the field itself is required")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"populateRequiredDefaults")),(0,r.yg)("td",{parentName:"tr",align:null},"Only sets default when a value is an object and its parent field is required, or it is a primitive value and it is required")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"skipDefaults")),(0,r.yg)("td",{parentName:"tr",align:null},"Does not set defaults")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"skipEmptyDefaults")),(0,r.yg)("td",{parentName:"tr",align:null},"Does not set an empty default. It will still apply the default value if a default property is defined in your schema")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: { type: 'string' },\n  minItems: 3,\n};\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    experimental_defaultFormStateBehavior={{\n      emptyObjectFields: 'populateRequiredDefaults',\n    }}\n  />,\n  document.getElementById('app')\n);\n")),(0,r.yg)("h3",{id:"allof"},(0,r.yg)("inlineCode",{parentName:"h3"},"allOf")),(0,r.yg)("p",null,"Optional enumerated flag controlling how empty defaults are populated when ",(0,r.yg)("inlineCode",{parentName:"p"},"allOf")," schemas are provided, defaulting to ",(0,r.yg)("inlineCode",{parentName:"p"},"skipDefaults"),":"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Flag Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"skipDefaults")),(0,r.yg)("td",{parentName:"tr",align:null},"Skip parsing defaults from ",(0,r.yg)("inlineCode",{parentName:"td"},"allOf")," schemas")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"populateDefaults")),(0,r.yg)("td",{parentName:"tr",align:null},"Generate default values for properties in the ",(0,r.yg)("inlineCode",{parentName:"td"},"allOf")," schema including ",(0,r.yg)("inlineCode",{parentName:"td"},"if-then-else")," syntax")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Example',\n  type: 'object',\n  properties: {\n    animalInfo: {\n      properties: {\n        animal: {\n          type: 'string',\n          default: 'Cat',\n          enum: ['Cat', 'Fish'],\n        },\n      },\n      allOf: [\n        {\n          if: {\n            properties: {\n              animal: {\n                const: 'Cat',\n              },\n            },\n          },\n          then: {\n            properties: {\n              food: {\n                type: 'string',\n                default: 'meat',\n                enum: ['meat', 'grass', 'fish'],\n              },\n            },\n            required: ['food'],\n          },\n        },\n      ],\n    },\n  },\n};\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    experimental_defaultFormStateBehavior={{\n      allOf: 'populateDefaults',\n    }}\n  />,\n  document.getElementById('app')\n);\n")),(0,r.yg)("h3",{id:"constasdefaults"},"constAsDefaults"),(0,r.yg)("p",null,"Optional enumerated flag controlling how const values are merged into the form data as defaults when dealing with undefined values, defaulting to ",(0,r.yg)("inlineCode",{parentName:"p"},"always"),".\nThe defaulting behavior for this flag will always be controlled by the ",(0,r.yg)("inlineCode",{parentName:"p"},"emptyObjectField")," flag value.\nFor instance, if ",(0,r.yg)("inlineCode",{parentName:"p"},"populateRequiredDefaults")," is set and the const value is not required, it will not be set."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Flag Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"always")),(0,r.yg)("td",{parentName:"tr",align:null},"A const value will always be merged into the form as a default. If there is are const values in a ",(0,r.yg)("inlineCode",{parentName:"td"},"oneOf")," (for instance to create an enumeration with title different from the values), the first const value will be defaulted")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"skipOneOf")),(0,r.yg)("td",{parentName:"tr",align:null},"If const is in a ",(0,r.yg)("inlineCode",{parentName:"td"},"oneOf")," it will NOT pick the first value as a default")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"never")),(0,r.yg)("td",{parentName:"tr",align:null},"A const value will never be used as a default")))),(0,r.yg)("h3",{id:"mergedefaultsintoformdata"},"mergeDefaultsIntoFormData"),(0,r.yg)("p",null,"Optional enumerated flag controlling how the defaults are merged into the form data when dealing with undefined values, defaulting to ",(0,r.yg)("inlineCode",{parentName:"p"},"useFormDataIfPresent"),"."),(0,r.yg)("p",null,"NOTE: If there is a default for a field and the ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," is unspecified, the default ALWAYS merges."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Flag Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"useFormDataIfPresent")),(0,r.yg)("td",{parentName:"tr",align:null},"Legacy behavior - Do not merge defaults if there is a value for a field in ",(0,r.yg)("inlineCode",{parentName:"td"},"formData")," even if that value is explicitly set to ",(0,r.yg)("inlineCode",{parentName:"td"},"undefined"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"useDefaultIfFormDataUndefined")),(0,r.yg)("td",{parentName:"tr",align:null},"If the value of a field within the ",(0,r.yg)("inlineCode",{parentName:"td"},"formData")," is ",(0,r.yg)("inlineCode",{parentName:"td"},"undefined"),", then use the default value instead")))),(0,r.yg)("h2",{id:"experimental_custommergeallof"},"experimental_customMergeAllOf"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"experimental_customMergeAllOf")," function allows you to provide a custom implementation for merging ",(0,r.yg)("inlineCode",{parentName:"p"},"allOf")," schemas. This can be particularly useful in scenarios where the default ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/mokkabonna/json-schema-merge-allof"},"json-schema-merge-allof")," library becomes a performance bottleneck, especially with large and complex schemas or doesn't satisfy your needs."),(0,r.yg)("p",null,"By providing your own implementation, you can potentially achieve significant performance improvements. For instance, if your use case only requires a subset of JSON Schema features, you can implement a faster, more tailored merging strategy."),(0,r.yg)("p",null,"If you're looking for alternative ",(0,r.yg)("inlineCode",{parentName:"p"},"allOf")," merging implementations, you might consider ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/udamir/allof-merge"},"allof-merge"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Warning:")," This is an experimental feature. Only use this if you fully understand the implications of custom ",(0,r.yg)("inlineCode",{parentName:"p"},"allOf")," merging and are prepared to handle potential edge cases. Incorrect implementations may lead to unexpected behavior or validation errors."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv8';\n\nconst customMergeAllOf = (schema: RJSFSchema): RJSFSchema => {\n  // Your custom implementation here\n};\n\nrender(\n  <Form schema={schema} validator={validator} experimental_customMergeAllOf={customMergeAllOf} />,\n  document.getElementById('app')\n);\n")),(0,r.yg)("h2",{id:"disabled"},"disabled"),(0,r.yg)("p",null,"It's possible to disable the whole form by setting the ",(0,r.yg)("inlineCode",{parentName:"p"},"disabled")," prop. The ",(0,r.yg)("inlineCode",{parentName:"p"},"disabled")," prop is then forwarded down to each field of the form."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} disabled />, document.getElementById('app'));\n")),(0,r.yg)("p",null,"If you just want to disable some fields, see the ",(0,r.yg)("inlineCode",{parentName:"p"},"ui:disabled")," parameter in ",(0,r.yg)("inlineCode",{parentName:"p"},"uiSchema"),"."),(0,r.yg)("h2",{id:"readonly"},"readonly"),(0,r.yg)("p",null,"It's possible to make the whole form read-only by setting the ",(0,r.yg)("inlineCode",{parentName:"p"},"readonly")," prop. The ",(0,r.yg)("inlineCode",{parentName:"p"},"readonly")," prop is then forwarded down to each field of the form."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} readonly />, document.getElementById('app'));\n")),(0,r.yg)("p",null,"If you just want to make some fields read-only, see the ",(0,r.yg)("inlineCode",{parentName:"p"},"ui:readonly")," parameter in ",(0,r.yg)("inlineCode",{parentName:"p"},"uiSchema"),"."),(0,r.yg)("h2",{id:"enctype"},"enctype"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"enctype")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"extraerrors"},"extraErrors"),(0,r.yg)("p",null,"This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it can be used to implement asynchronous validation.\nBy default, these are non-blocking errors, meaning that you can still submit the form when these are the only errors displayed to the user.\nSee ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/usage/validation"},"Validation")," for more information."),(0,r.yg)("h2",{id:"extraerrorsblocksubmit"},"extraErrorsBlockSubmit"),(0,r.yg)("p",null,"If set to true, causes the ",(0,r.yg)("inlineCode",{parentName:"p"},"extraErrors")," to become blocking when the form is submitted."),(0,r.yg)("h2",{id:"fields"},"fields"),(0,r.yg)("p",null,"Dictionary of registered fields in the form. See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/advanced-customization/custom-widgets-fields"},"Custom Widgets and Fields")," for more information."),(0,r.yg)("h2",{id:"focusonfirsterror"},"focusOnFirstError"),(0,r.yg)("p",null,"If set to true, then the first field with an error will receive the focus when the form is submitted with errors."),(0,r.yg)("p",null,"You can also provide a custom callback function to handle what happens when this function is called."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema, RJSFValidationError } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst focusOnError = (error: RJSFValidationError) => {\n  console.log('I need to handle focusing this error');\n};\n\nrender(<Form schema={schema} validator={validator} focusOnFirstError={focusOnError} />, document.getElementById('app'));\n")),(0,r.yg)("h2",{id:"formcontext"},"formContext"),(0,r.yg)("p",null,"You can provide a ",(0,r.yg)("inlineCode",{parentName:"p"},"formContext")," object to the Form, which is passed down to all fields and widgets. Useful for implementing context aware fields and widgets."),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/api-reference/themes/antd/uiSchema#formcontext"},"AntD Customization")," for formContext customizations for the ",(0,r.yg)("inlineCode",{parentName:"p"},"antd")," theme.\nSee ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/api-reference/themes/semantic-ui/uiSchema#formcontext"},"Semantic UI Customization")," for formContext customizations for the ",(0,r.yg)("inlineCode",{parentName:"p"},"semantic-ui")," theme."),(0,r.yg)("h2",{id:"formdata"},"formData"),(0,r.yg)("p",null,"Often you'll want to prefill a form with existing data; this is done by passing a ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," prop object matching the schema."),(0,r.yg)("h2",{id:"id"},"id"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"idprefix"},"idPrefix"),(0,r.yg)("p",null,"To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids (the default is ",(0,r.yg)("inlineCode",{parentName:"p"},"root"),")."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} idPrefix={'rjsf_prefix'} />, document.getElementById('app'));\n")),(0,r.yg)("p",null,"This will render ",(0,r.yg)("inlineCode",{parentName:"p"},'<input id="rjsf_prefix_key">')," instead of ",(0,r.yg)("inlineCode",{parentName:"p"},'<input id="root_key">')),(0,r.yg)("h2",{id:"idseparator"},"idSeparator"),(0,r.yg)("p",null,"To avoid using a path separator that is present in field names, it is possible to change the separator used for ids (the default is ",(0,r.yg)("inlineCode",{parentName:"p"},"_"),")."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    first: {\n      type: 'string',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} idSeparator={'/'} />, document.getElementById('app'));\n")),(0,r.yg)("p",null,"This will render ",(0,r.yg)("inlineCode",{parentName:"p"},'<input id="root/first">')," instead of ",(0,r.yg)("inlineCode",{parentName:"p"},'<input\nid="root_first">')," when rendering ",(0,r.yg)("inlineCode",{parentName:"p"},"first"),"."),(0,r.yg)("h2",{id:"liveomit"},"liveOmit"),(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"omitExtraData")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"liveOmit")," are both set to true, then extra form data values that are not in any form field will be removed whenever ",(0,r.yg)("inlineCode",{parentName:"p"},"onChange")," is called. Set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.yg)("h2",{id:"livevalidate"},"liveValidate"),(0,r.yg)("p",null,"If set to true, the form will perform validation and show any validation errors whenever the form data is changed, rather than just on submit."),(0,r.yg)("h2",{id:"method"},"method"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"method")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"name"},"name"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-name"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"nohtml5validate"},"noHtml5Validate"),(0,r.yg)("p",null,"If set to true, turns off HTML5 validation on the form. Set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.yg)("h2",{id:"novalidate"},"noValidate"),(0,r.yg)("p",null,"If set to true, turns off all validation. Set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.yg)("h2",{id:"omitextradata"},"omitExtraData"),(0,r.yg)("p",null,"If set to true, then extra form data values that are not in any form field will be removed whenever ",(0,r.yg)("inlineCode",{parentName:"p"},"onSubmit")," is called. Set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.yg)("h2",{id:"onblur"},"onBlur"),(0,r.yg)("p",null,"Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass an ",(0,r.yg)("inlineCode",{parentName:"p"},"onBlur")," handler, which will receive the id of the input that was blurred and the field value."),(0,r.yg)("h2",{id:"onchange"},"onChange"),(0,r.yg)("p",null,"If you plan on being notified every time the form data are updated, you can pass an ",(0,r.yg)("inlineCode",{parentName:"p"},"onChange")," handler, which will receive the same first argument as ",(0,r.yg)("inlineCode",{parentName:"p"},"onSubmit")," any time a value is updated in the form.\nIt will also receive, as the second argument, the ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," of the field which experienced the change.\nGenerally, this will be the ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," of the field for which input data is modified.\nIn the case of adding/removing of new fields in arrays or objects with ",(0,r.yg)("inlineCode",{parentName:"p"},"additionalProperties")," and the rearranging of items in arrays, the ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," will be that of the array or object itself, rather than the item/field being added, removed or moved."),(0,r.yg)("h2",{id:"onerror"},"onError"),(0,r.yg)("p",null,"To react when submitted form data are invalid, pass an ",(0,r.yg)("inlineCode",{parentName:"p"},"onError")," handler. It will be passed the list of encountered errors:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\nconst onError = (errors) => console.log('I have', errors.length, 'errors to fix');\n\nrender(<Form schema={schema} validator={validator} onError={onError} />, document.getElementById('app'));\n")),(0,r.yg)("h2",{id:"onfocus"},"onFocus"),(0,r.yg)("p",null,"Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass an ",(0,r.yg)("inlineCode",{parentName:"p"},"onFocus")," handler, which will receive the id of the input that is focused and the field value."),(0,r.yg)("h2",{id:"onsubmit"},"onSubmit"),(0,r.yg)("p",null,"You can pass a function as the ",(0,r.yg)("inlineCode",{parentName:"p"},"onSubmit")," prop of your ",(0,r.yg)("inlineCode",{parentName:"p"},"Form")," component to listen to when the form is submitted and its data are valid.\nIt will be passed a result object having a ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," attribute, which is the valid form data you're usually after.\nThe original event will also be passed as a second parameter:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\nconst onSubmit = ({ formData }, e) => console.log('Data submitted: ', formData);\n\nrender(<Form schema={schema} validator={validator} onSubmit={onSubmit} />, document.getElementById('app'));\n")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Note: If there are fields in the ",(0,r.yg)("inlineCode",{parentName:"p"},"formData")," that are not represented in the schema, they will be retained by default. If you would like to remove those extra values on form submission, you may need to set the ",(0,r.yg)("inlineCode",{parentName:"p"},"omitExtraData")," and/or ",(0,r.yg)("inlineCode",{parentName:"p"},"liveOmit")," props.")),(0,r.yg)("h2",{id:"schema"},"schema"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Required"),"! Form schema. We support JSON schema draft-07 by default. See ",(0,r.yg)("a",{parentName:"p",href:"https://json-schema.org/draft-07/json-schema-release-notes.html"},"Schema Reference")," for more information."),(0,r.yg)("h2",{id:"showerrorlist"},"showErrorList"),(0,r.yg)("p",null,"When this prop is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"top")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"bottom"),", a list of errors (or the custom error list defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"ErrorList"),") will also show at the ",(0,r.yg)("inlineCode",{parentName:"p"},"bottom")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"top")," of the form. When set to false, only inline input validation errors will be shown. Set to ",(0,r.yg)("inlineCode",{parentName:"p"},"top")," by default. See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/usage/validation"},"Validation")," for more information."),(0,r.yg)("h2",{id:"tagname"},"tagName"),(0,r.yg)("p",null,"It's possible to change the default ",(0,r.yg)("inlineCode",{parentName:"p"},"form")," tag name to a different HTML tag, which can be helpful if you are nesting forms. However, native browser form behaviour, such as submitting when the ",(0,r.yg)("inlineCode",{parentName:"p"},"Enter")," key is pressed, may no longer work."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'<Form\n  tagName="div"\n  ...\n/>\n')),(0,r.yg)("p",null,"You can also provide a class/function component."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const CustomForm = props => <form {...props} style={...} className={...} />\n// ...\n<Form\n  tagName={CustomForm}\n  ...\n/>\n")),(0,r.yg)("h2",{id:"target"},"target"),(0,r.yg)("p",null,"The value of this prop will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"target")," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target"},"HTML attribute on the form"),"."),(0,r.yg)("h2",{id:"templates"},"templates"),(0,r.yg)("p",null,"Dictionary of registered templates in the form. See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/advanced-customization/custom-templates"},"Custom Templates")," for more information."),(0,r.yg)("h2",{id:"transformerrors"},"transformErrors"),(0,r.yg)("p",null,"A function can be passed to this prop in order to make modifications to the default errors resulting from JSON Schema validation. See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/usage/validation"},"Validation")," for more information."),(0,r.yg)("h2",{id:"translatestring"},"translateString"),(0,r.yg)("p",null,"Optional string translation function, if provided, allows users to change the translation of the RJSF internal strings.\nSome strings contain replaceable parameter values as indicated by ",(0,r.yg)("inlineCode",{parentName:"p"},"%1"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"%2"),", etc.\nThe number after the ",(0,r.yg)("inlineCode",{parentName:"p"},"%")," indicates the order of the parameter.\nThe ordering of parameters is important because some languages may choose to put the second parameter before the first in its translation. In addition to replaceable parameters, some of the strings support the use of markdown and simple html."),(0,r.yg)("p",null,"One can use the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/utils/src/enums.ts"},"documentation")," of the ",(0,r.yg)("inlineCode",{parentName:"p"},"TranslatableString")," enums to determine which enum values contain replaceable parameters and which support markdown and simple html."),(0,r.yg)("p",null,"One could use this function to alter one or more of the existing english strings to better suit one's application or fully translate all strings into a different language.\nBelow is an example of changing a few of the english strings to something else:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { TranslatableString, englishStringTranslator, replaceStringParameters } from '@rjsf/utils';\n\nfunction fixupSomeEnglishStrings(stringToTranslate: TranslatableString, params?: string[]): string {\n  switch (stringToTranslate) {\n    case TranslatableString.NewStringDefault:\n      return ''; // Use an empty string for the new additionalProperties string default value\n    case TranslatableString.KeyLabel:\n      return replaceStringParameters('%1 Key Name', params); // Add \"Name\" onto the end of the WrapIfAdditionalTemplate key label\n    default:\n      return englishStringTranslator(stringToTranslate, params); // Fallback to the default english\n  }\n}\n")),(0,r.yg)("h2",{id:"uischema"},"uiSchema"),(0,r.yg)("p",null,"Form uiSchema. See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/api-reference/uiSchema"},"uiSchema Reference")," for more information."),(0,r.yg)("h2",{id:"validator"},"validator"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Required"),"! An implementation of the ",(0,r.yg)("inlineCode",{parentName:"p"},"ValidatorType")," interface that is needed for form validation to work.\n",(0,r.yg)("inlineCode",{parentName:"p"},"@rjsf/validator-ajv8")," exports the implementation of this interface from RJSF version 4."),(0,r.yg)("h2",{id:"widgets"},"widgets"),(0,r.yg)("p",null,"Dictionary of registered widgets in the form. See ",(0,r.yg)("a",{parentName:"p",href:"/react-jsonschema-form/docs/advanced-customization/custom-widgets-fields"},"Custom Widgets and Fields")," for more information."))}u.isMDXComponent=!0}}]);