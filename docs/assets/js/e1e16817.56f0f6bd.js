"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[6976],{3636:(e,n,a)=>{a.d(n,{Iu:()=>c,yg:()=>y});var t=a(5668);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),l=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=l(e.components);return t.createElement(m.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(a),d=r,y=p["".concat(m,".").concat(d)]||p[d]||u[d]||i;return a?t.createElement(y,o(o({ref:n},c),{},{components:a})):t.createElement(y,o({ref:n},c))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5740:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var t=a(5307),r=(a(5668),a(3636));const i={},o="Arrays",s={unversionedId:"usage/arrays",id:"version-3.2.1/usage/arrays",title:"Arrays",description:"Arrays are defined with a type equal to array, and array items' schemas are specified in the items keyword.",source:"@site/versioned_docs/version-3.2.1/usage/arrays.md",sourceDirName:"usage",slug:"/usage/arrays",permalink:"/react-jsonschema-form/docs/version-3.2.1/usage/arrays",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md",tags:[],version:"3.2.1",frontMatter:{},sidebar:"docs",previous:{title:"Usage and Customization",permalink:"/react-jsonschema-form/docs/version-3.2.1/usage/"},next:{title:"Schema definitions and references",permalink:"/react-jsonschema-form/docs/version-3.2.1/usage/definitions"}},m={},l=[{value:"Arrays of a single field",id:"arrays-of-a-single-field",level:2},{value:"Arrays of objects",id:"arrays-of-objects",level:2},{value:"uiSchema for array items",id:"uischema-for-array-items",level:2},{value:"The <code>additionalItems</code> keyword",id:"the-additionalitems-keyword",level:2},{value:"Array item options",id:"array-item-options",level:2},{value:"<code>orderable</code> option",id:"orderable-option",level:3},{value:"<code>addable</code> option",id:"addable-option",level:3},{value:"<code>removable</code> option",id:"removable-option",level:3},{value:"Multiple-choice list",id:"multiple-choice-list",level:2},{value:"Specifying the minimum or maximum number of items",id:"specifying-the-minimum-or-maximum-number-of-items",level:2},{value:"Inline checkboxes",id:"inline-checkboxes",level:2}],c={toc:l},p="wrapper";function u(e){let{components:n,...a}=e;return(0,r.yg)(p,(0,t.c)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"arrays"},"Arrays"),(0,r.yg)("p",null,"Arrays are defined with a type equal to ",(0,r.yg)("inlineCode",{parentName:"p"},"array"),", and array items' schemas are specified in the ",(0,r.yg)("inlineCode",{parentName:"p"},"items")," keyword."),(0,r.yg)("h2",{id:"arrays-of-a-single-field"},"Arrays of a single field"),(0,r.yg)("p",null,"Arrays of a single field type can be specified as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h2",{id:"arrays-of-objects"},"Arrays of objects"),(0,r.yg)("p",null,"Arrays of objects can be specified as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "object",\n    properties: {\n        name: {\n            type: "string"\n        }\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h2",{id:"uischema-for-array-items"},"uiSchema for array items"),(0,r.yg)("p",null,"To specify a uiSchema that applies to array items, specify the uiSchema value within the ",(0,r.yg)("inlineCode",{parentName:"p"},"items")," property:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  }\n};\n\nconst uiSchema = {\n  items: {\n    "ui:widget": "textarea"\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h2",{id:"the-additionalitems-keyword"},"The ",(0,r.yg)("inlineCode",{parentName:"h2"},"additionalItems")," keyword"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"additionalItems")," keyword allows the user to add additional items of a given schema. For example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  },\n  additionalItems: {\n    type: "boolean"\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h2",{id:"array-item-options"},"Array item options"),(0,r.yg)("h3",{id:"orderable-option"},(0,r.yg)("inlineCode",{parentName:"h3"},"orderable")," option"),(0,r.yg)("p",null,"Array items are orderable by default, and react-jsonschema-form renders move up/down buttons alongside them. The uiSchema ",(0,r.yg)("inlineCode",{parentName:"p"},"orderable")," options allows you to disable ordering:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  }\n};\n\nconst uiSchema = {\n  "ui:options":  {\n    orderable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h3",{id:"addable-option"},(0,r.yg)("inlineCode",{parentName:"h3"},"addable")," option"),(0,r.yg)("p",null,"If either ",(0,r.yg)("inlineCode",{parentName:"p"},"items")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"additionalItems")," contains a schema object, an add button for new items is shown by default. You can turn this off with the ",(0,r.yg)("inlineCode",{parentName:"p"},"addable")," option in ",(0,r.yg)("inlineCode",{parentName:"p"},"uiSchema"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  }\n};\n\nconst uiSchema = {\n  "ui:options":  {\n    addable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h3",{id:"removable-option"},(0,r.yg)("inlineCode",{parentName:"h3"},"removable")," option"),(0,r.yg)("p",null,"A remove button is shown by default for an item if ",(0,r.yg)("inlineCode",{parentName:"p"},"items")," contains a schema object, or the item is an ",(0,r.yg)("inlineCode",{parentName:"p"},"additionalItems")," instance. You can turn this off with the ",(0,r.yg)("inlineCode",{parentName:"p"},"removable")," option in ",(0,r.yg)("inlineCode",{parentName:"p"},"uiSchema"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  }\n};\n\nconst uiSchema = {\n  "ui:options":  {\n    removable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h2",{id:"multiple-choice-list"},"Multiple-choice list"),(0,r.yg)("p",null,"The default behavior for array fields is a list of text inputs with add/remove buttons. There are two alternative widgets for picking multiple elements from a list of choices. Typically this applies when a schema has an ",(0,r.yg)("inlineCode",{parentName:"p"},"enum")," list for the ",(0,r.yg)("inlineCode",{parentName:"p"},"items")," property of an ",(0,r.yg)("inlineCode",{parentName:"p"},"array")," field, and the ",(0,r.yg)("inlineCode",{parentName:"p"},"uniqueItems")," property set to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  title: "A multiple-choice list",\n  items: {\n    type: "string",\n    enum: ["foo", "bar", "fuzz", "qux"],\n  },\n  uniqueItems: true\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.yg)("p",null,"By default, this will render a multiple select box. If you prefer a list of checkboxes, just set the uiSchema ",(0,r.yg)("inlineCode",{parentName:"p"},"ui:widget")," directive to ",(0,r.yg)("inlineCode",{parentName:"p"},"checkboxes")," for that field:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const schema = {\n  type: "array",\n  title: "A multiple-choice list",\n  items: {\n    type: "string",\n    enum: ["foo", "bar", "fuzz", "qux"],\n  },\n  uniqueItems: true\n};\n\nconst uiSchema = {\n  "ui:widget": "checkboxes"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')),(0,r.yg)("h2",{id:"specifying-the-minimum-or-maximum-number-of-items"},"Specifying the minimum or maximum number of items"),(0,r.yg)("p",null,"Note that when an array property is marked as ",(0,r.yg)("inlineCode",{parentName:"p"},"required"),", an empty array is considered valid. If the array needs to be populated, you can specify the minimum number of items using the ",(0,r.yg)("inlineCode",{parentName:"p"},"minItems")," property."),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "array",\n  minItems: 2,\n  title: "A multiple-choice list",\n  items: {\n    type: "string",\n    enum: ["foo", "bar", "fuzz", "qux"],\n  },\n  uniqueItems: true\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.yg)("p",null,"You can also specify the maximum number of items in an array using the ",(0,r.yg)("inlineCode",{parentName:"p"},"maxItems")," property."),(0,r.yg)("h2",{id:"inline-checkboxes"},"Inline checkboxes"),(0,r.yg)("p",null,"By default, checkboxes are stacked. If you prefer them inline, set the ",(0,r.yg)("inlineCode",{parentName:"p"},"inline")," property to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const schema = {\n  type: "array",\n  minItems: 2,\n  title: "A multiple-choice list",\n  items: {\n    type: "string",\n    enum: ["foo", "bar", "fuzz", "qux"],\n  },\n  uniqueItems: true\n};\n\nconst uiSchema = {\n  "ui:widget": "checkboxes",\n  "ui:options": {\n    inline: true\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')))}u.isMDXComponent=!0}}]);